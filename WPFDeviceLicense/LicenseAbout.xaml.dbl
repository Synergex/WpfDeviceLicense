import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Windows
import System.Windows.Controls
import System.Windows.Data
import System.Windows.Documents
import System.Windows.Input
import System.Windows.Media
import System.Windows.Media.Imaging
import System.Windows.Navigation
import System.Windows.Shapes
import System.Windows.Threading
import Synergex.SynergyDE.DeviceLicensing

namespace WPFDeviceLicense

    ;;; <summary>
    ;;; Interaction logic for LicenseAbout.xaml
    ;;; </summary>
    public partial class LicenseAboutDialog extends UserControl
    
		private dispatchFrame, @DispatcherFrame
		public method LicenseAboutDialog
			dispFrame, @DispatcherFrame
		proc
			this.InitializeComponent()
			dispatchFrame = dispFrame
			ShowLicenseInfo()
		endmethod
		
		private method ShowLicenseInfo, void
		proc
			data linfo, @LicenseInfo
			linfo = DeviceLicensing.GetLicenseInfo()
			if (linfo != ^null)
			begin
				tokenBlock.Text = linfo.Token
				descripBlock.Text = linfo.Description
				transferBlock.Text = linfo.Transferable.ToString()
				statusBlock.Text = linfo.Status.ToString()
				activatedBlock.Text = linfo.Activated.ToString()
				expireBlock.Text = linfo.Expiration.ToString()
				if (linfo.SubscriptionExpiration == DateTime.MinValue) then
					subBlock.Text = "";
				else
					subBlock.Text = linfo.SubscriptionExpiration.ToString();
				debugBlock.Text = linfo.DebugInfo
			end
			if (linfo == ^null || linfo.Status != LicenseStatus.Active)
			begin
				syncBtn.IsEnabled = false
			end
		end

		public static method ErrorMessage, string
			lerr, LicenseError
		proc
			case (lerr) of
			begincase
			LicenseError.Connectivity: mreturn "Trouble connecting to license server"
			LicenseError.DeviceMismatch: mreturn "License does not match device"
			LicenseError.Expired: mreturn "License has expired"
			LicenseError.Revoked: mreturn "License has been revoked"
			LicenseError.Unauthorized: mreturn "Invalid token or password"
			LicenseError.NoSlots: mreturn "No more device license slots available"
			LicenseError.Timeout: mreturn "Timeout connecting to license server"
			LicenseError.DuplicateDevice: mreturn "Duplicate device description"
			LicenseError.MultipleInit: mreturn "Multiple initializations of device"
			LicenseError.InvalidAttribute: mreturn "AppGuid or PublicKey in SynergyDeviceLicenseAttribute is invalid"
			LicenseError.NotFound: mreturn "Device GUID not found"
			endcase
			mreturn lerr.ToString()
		end
		private async method syncBtn_Click, void
			sender, @object 
			e, @System.Windows.RoutedEventArgs 
			endparams
		proc
			data result, LicenseError
			syncBtn.IsEnabled = false
			result = await LicenseClass.AwaitSync(false);
			syncBtn.IsEnabled = true
			if (result == LicenseError.None) then
			begin
				ShowLicenseInfo()
				MessageBox.Show("Application synchronized")
			end
			else 
			begin
				data msg, String, ErrorMessage(result)
				data li, @LicenseInfo, DeviceLicensing.GetLicenseInfo()
				if ((li.Status == LicenseStatus.NotActive) || (li.Expiration <= DateTime.Now)) then
				begin
					MessageBox.Show(msg+Environment.NewLine+"Application no longer licensed.", "Device License Error")
					; here is where you add logic to gracefully exit app. for sample i brute forced exit
					Environment.Exit(0)
				end
				else if (li.Status == LicenseStatus.Grace) then
				begin
					data gmsg, String
					gmsg = "Application is in a grace period and will run until "+li.Expiration.ToString()+Environment.NewLine+"Contact your ISV for help"
					MessageBox.Show(msg+"."+Environment.NewLine+gmsg, "Device License Error");
				end
				else if (result == LicenseError.Connectivity || result == LicenseError.Timeout)
					MessageBox.Show(msg, "Device License Error")
			end
		endmethod
		
		private async method deactivateBtn_Click, void
			sender, @object 
			e, @System.Windows.RoutedEventArgs 
			endparams
		proc
			data result, LicenseError
			deactivateBtn.IsEnabled= false
			result = await DeviceLicensing.Deactivate();
			deactivateBtn.IsEnabled= true
			if (result == LicenseError.None) then
				MessageBox.Show("Application deactivated")
			else
				MessageBox.Show(ErrorMessage(result),"Device License Error")
			; here is where you add logic to gracefully exit app. for sample i brute forced exit
			Environment.Exit(0)
		endmethod
		
    endclass
endnamespace
