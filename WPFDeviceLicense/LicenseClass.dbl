import Synergex.SynergyDE.DeviceLicensing
import System.Threading.Tasks

import System.Windows
import System.Windows.Threading

; TODO: Add your public key and appguid to attribute below
{assembly:Synergex.SynergyDE.DeviceLicensing.SynergyDeviceLicense(PublicKey="", AppGUID="", Class=^typeof(WPFDeviceLicense.LicenseClass))}



namespace WPFDeviceLicense
	public class LicenseClass implements ISynergyDeviceCallback
		private async method InitHelper, void
			frame, @DispatcherFrame
		proc
			data loadingDialog = new Window()
			loadingDialog.Content = new LoadingDialog()
			try
			begin
				data result, Synergex.SynergyDE.DeviceLicensing.LicenseError
				loadingDialog.Show()
				result = await DeviceLicensing.GetDeviceGUID()
				if(result != LicenseError.None)
					MessageBox.Show("failed getting device guid: " + LicenseAboutDialog.ErrorMessage(result))
			end
			finally
			begin
				;;we're done with the dispatcher so let it exit
				loadingDialog.Close()
				frame.Continue = false
			end
			endtry
		endmethod
		
		
		public method Init, @Task
		proc
			data pushedFrame = new DispatcherFrame()
			lambda InitCurry()
			begin
				InitHelper(pushedFrame)
			end
			Dispatcher.CurrentDispatcher.Invoke(DispatcherPriority.Normal, (Action)InitCurry)
			Dispatcher.PushFrame(pushedFrame)
			
			mreturn Task.FromResult(true)
			
		end
		
		public method ActivationDialog, @Task
		proc
			data pushedFrame = new DispatcherFrame()
			data inputDialog = new Window()
			inputDialog.Content = new LoginDialog(pushedFrame)
			inputDialog.Show()
			
			Dispatcher.PushFrame(pushedFrame)
			
			mreturn Task.FromResult(true)
		end
		
		private const MAX_RETRY, int, 3
		public static async method AwaitSync, @Task<LicenseError>
		    blocking, boolean
		proc
			data result, Synergex.SynergyDE.DeviceLicensing.LicenseError
			data retry, int, 0
			data reauth = false
			while (retry < MAX_RETRY)
			begin
			    incr retry
			    result = await DeviceLicensing.Synchronize(reauth);
			    if (result == LicenseError.None) then
					retry = MAX_RETRY	; done
				else if ((retry < MAX_RETRY) && (result == LicenseError.Connectivity || result == LicenseError.Timeout)) then
				begin
					if (!blocking) then
						retry = MAX_RETRY	; when not blocking skip out on connectivity and timeout errors
					else
					begin
						data msg = "failed while synchronizing license: " + LicenseAboutDialog.ErrorMessage(result) +". Try again?"
						data mbr = RetryDialog.ShowRetryDialog(msg,RetryButtons.YesNoDebug)
						if (mbr == RetryValue.No)
							retry = MAX_RETRY	; dont retry
					end
				end
			    else 
			    begin
					data msg = "failed while synchronizing license: " + LicenseAboutDialog.ErrorMessage(result)
					data mb = RetryButtons.OK;
					if (result == LicenseError.NotFound)
					begin
						mb = (blocking? RetryButtons.Debug : RetryButtons.OKDebug);
						msg += Environment.NewLine + "Please deactivate the device.";
					end
					RetryDialog.ShowRetryDialog(msg,mb)
					if (result == LicenseError.DeviceMismatch && reauth== false) then
						reauth = true		; auto reauth when device mismatch
					else
						retry = MAX_RETRY	;dont retry
				end    				  
			end
			mreturn result;
		endmethod
		
		private async method BlockingSyncHelper, void
			frame, @DispatcherFrame
		proc
			data loadingDialog = new Window()
			loadingDialog.Content = new LoadingDialog()
			try
			begin
				loadingDialog.Show()
				AwaitSync(true)
			end
			finally
			begin
				;;we're done with the dispatcher so let it exit
				frame.Continue = false
				loadingDialog.Close()
			end
			endtry
		endmethod
		
		public method Synchronize, @Task
			blocking, boolean
		proc
			if(!blocking) then
			begin  
				mreturn AwaitSync(false)
			end				
			else
			begin
				data pushedFrame = new DispatcherFrame()
				lambda SynchronizeCurry()
				begin
					BlockingSyncHelper(pushedFrame)
				end
				Dispatcher.CurrentDispatcher.Invoke(DispatcherPriority.Normal, (Action)SynchronizeCurry)
				Dispatcher.PushFrame(pushedFrame)
				
				mreturn Task.FromResult(true)
			end
		end

		; when a user, who is sometimes disconnected from the internet,
		; is connected this method should be called to see if we're nearing
		; the expiration period and if so, call sync.
		public static async method CheckToSync, void
			reauth, boolean
		proc
			data linfo, @LicenseInfo
			linfo = DeviceLicensing.GetLicenseInfo()
			if (linfo != ^null)
			begin
				data tspan = (linfo.Expiration - DateTime.Now)
				if (linfo.Status != LicenseStatus.Active || tspan.TotalDays < 7)
				begin
					await AwaitSync(true);
				end
			end
		end

	endclass
endnamespace



